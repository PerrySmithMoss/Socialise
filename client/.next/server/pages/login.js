"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/login";
exports.ids = ["pages/login"];
exports.modules = {

/***/ "./auth/accessKey.ts":
/*!***************************!*\
  !*** ./auth/accessKey.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"accessKey\": () => (/* binding */ accessKey),\n/* harmony export */   \"getAccessKey\": () => (/* binding */ getAccessKey),\n/* harmony export */   \"setAccessKey\": () => (/* binding */ setAccessKey)\n/* harmony export */ });\nlet accessKey = \"\";\nconst setAccessKey = (key)=>{\n    accessKey = key;\n};\nconst getAccessKey = ()=>{\n    return accessKey;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hdXRoL2FjY2Vzc0tleS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFJQSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRW5CLE1BQU1DLFlBQVksR0FBRyxDQUFDQyxHQUFXLEdBQUs7SUFDekNGLFNBQVMsR0FBR0UsR0FBRztDQUNsQjtBQUdNLE1BQU1DLFlBQVksR0FBRyxJQUFNO0lBQzlCLE9BQU9ILFNBQVM7Q0FDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9hdXRoL2FjY2Vzc0tleS50cz8zMTdjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgYWNjZXNzS2V5ID0gXCJcIjtcblxuZXhwb3J0IGNvbnN0IHNldEFjY2Vzc0tleSA9IChrZXk6IHN0cmluZykgPT4ge1xuICAgIGFjY2Vzc0tleSA9IGtleVxufVxuXG5cbmV4cG9ydCBjb25zdCBnZXRBY2Nlc3NLZXkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFjY2Vzc0tleVxufSJdLCJuYW1lcyI6WyJhY2Nlc3NLZXkiLCJzZXRBY2Nlc3NLZXkiLCJrZXkiLCJnZXRBY2Nlc3NLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./auth/accessKey.ts\n");

/***/ }),

/***/ "./graphql/generated/graphql.tsx":
/*!***************************************!*\
  !*** ./graphql/generated/graphql.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ByeDocument\": () => (/* binding */ ByeDocument),\n/* harmony export */   \"CommentOnPostDocument\": () => (/* binding */ CommentOnPostDocument),\n/* harmony export */   \"CreatePostDocument\": () => (/* binding */ CreatePostDocument),\n/* harmony export */   \"DeletePostDocument\": () => (/* binding */ DeletePostDocument),\n/* harmony export */   \"DeleteUserDocument\": () => (/* binding */ DeleteUserDocument),\n/* harmony export */   \"FollowUserDocument\": () => (/* binding */ FollowUserDocument),\n/* harmony export */   \"GetAllMessagesFromUserDocument\": () => (/* binding */ GetAllMessagesFromUserDocument),\n/* harmony export */   \"GetAllPostsDocument\": () => (/* binding */ GetAllPostsDocument),\n/* harmony export */   \"GetAllSpecificUserPostsDocument\": () => (/* binding */ GetAllSpecificUserPostsDocument),\n/* harmony export */   \"GetAllUserMessagesDocument\": () => (/* binding */ GetAllUserMessagesDocument),\n/* harmony export */   \"GetAllUserPostsDocument\": () => (/* binding */ GetAllUserPostsDocument),\n/* harmony export */   \"GetAllUsersDocument\": () => (/* binding */ GetAllUsersDocument),\n/* harmony export */   \"GetCurrentUserDocument\": () => (/* binding */ GetCurrentUserDocument),\n/* harmony export */   \"GetPostByIdDocument\": () => (/* binding */ GetPostByIdDocument),\n/* harmony export */   \"GetSpecificUserInfoDocument\": () => (/* binding */ GetSpecificUserInfoDocument),\n/* harmony export */   \"GetUsersTheLoggedInUserMayKnowDocument\": () => (/* binding */ GetUsersTheLoggedInUserMayKnowDocument),\n/* harmony export */   \"HelloDocument\": () => (/* binding */ HelloDocument),\n/* harmony export */   \"LikePostDocument\": () => (/* binding */ LikePostDocument),\n/* harmony export */   \"LogUserOutDocument\": () => (/* binding */ LogUserOutDocument),\n/* harmony export */   \"LoginDocument\": () => (/* binding */ LoginDocument),\n/* harmony export */   \"NewMessageDocument\": () => (/* binding */ NewMessageDocument),\n/* harmony export */   \"PostSnippetFragmentDoc\": () => (/* binding */ PostSnippetFragmentDoc),\n/* harmony export */   \"RegisterDocument\": () => (/* binding */ RegisterDocument),\n/* harmony export */   \"RetweetPostDocument\": () => (/* binding */ RetweetPostDocument),\n/* harmony export */   \"SearchUsersDocument\": () => (/* binding */ SearchUsersDocument),\n/* harmony export */   \"SendMessageDocument\": () => (/* binding */ SendMessageDocument),\n/* harmony export */   \"SpecifcUserSnippetFragmentDoc\": () => (/* binding */ SpecifcUserSnippetFragmentDoc),\n/* harmony export */   \"UpdateUserProfileDocument\": () => (/* binding */ UpdateUserProfileDocument),\n/* harmony export */   \"UploadUserImageDocument\": () => (/* binding */ UploadUserImageDocument),\n/* harmony export */   \"useByeLazyQuery\": () => (/* binding */ useByeLazyQuery),\n/* harmony export */   \"useByeQuery\": () => (/* binding */ useByeQuery),\n/* harmony export */   \"useCommentOnPostMutation\": () => (/* binding */ useCommentOnPostMutation),\n/* harmony export */   \"useCreatePostMutation\": () => (/* binding */ useCreatePostMutation),\n/* harmony export */   \"useDeletePostMutation\": () => (/* binding */ useDeletePostMutation),\n/* harmony export */   \"useDeleteUserMutation\": () => (/* binding */ useDeleteUserMutation),\n/* harmony export */   \"useFollowUserMutation\": () => (/* binding */ useFollowUserMutation),\n/* harmony export */   \"useGetAllMessagesFromUserLazyQuery\": () => (/* binding */ useGetAllMessagesFromUserLazyQuery),\n/* harmony export */   \"useGetAllMessagesFromUserQuery\": () => (/* binding */ useGetAllMessagesFromUserQuery),\n/* harmony export */   \"useGetAllPostsLazyQuery\": () => (/* binding */ useGetAllPostsLazyQuery),\n/* harmony export */   \"useGetAllPostsQuery\": () => (/* binding */ useGetAllPostsQuery),\n/* harmony export */   \"useGetAllSpecificUserPostsLazyQuery\": () => (/* binding */ useGetAllSpecificUserPostsLazyQuery),\n/* harmony export */   \"useGetAllSpecificUserPostsQuery\": () => (/* binding */ useGetAllSpecificUserPostsQuery),\n/* harmony export */   \"useGetAllUserMessagesLazyQuery\": () => (/* binding */ useGetAllUserMessagesLazyQuery),\n/* harmony export */   \"useGetAllUserMessagesQuery\": () => (/* binding */ useGetAllUserMessagesQuery),\n/* harmony export */   \"useGetAllUserPostsLazyQuery\": () => (/* binding */ useGetAllUserPostsLazyQuery),\n/* harmony export */   \"useGetAllUserPostsQuery\": () => (/* binding */ useGetAllUserPostsQuery),\n/* harmony export */   \"useGetAllUsersLazyQuery\": () => (/* binding */ useGetAllUsersLazyQuery),\n/* harmony export */   \"useGetAllUsersQuery\": () => (/* binding */ useGetAllUsersQuery),\n/* harmony export */   \"useGetCurrentUserLazyQuery\": () => (/* binding */ useGetCurrentUserLazyQuery),\n/* harmony export */   \"useGetCurrentUserQuery\": () => (/* binding */ useGetCurrentUserQuery),\n/* harmony export */   \"useGetPostByIdLazyQuery\": () => (/* binding */ useGetPostByIdLazyQuery),\n/* harmony export */   \"useGetPostByIdQuery\": () => (/* binding */ useGetPostByIdQuery),\n/* harmony export */   \"useGetSpecificUserInfoLazyQuery\": () => (/* binding */ useGetSpecificUserInfoLazyQuery),\n/* harmony export */   \"useGetSpecificUserInfoQuery\": () => (/* binding */ useGetSpecificUserInfoQuery),\n/* harmony export */   \"useGetUsersTheLoggedInUserMayKnowLazyQuery\": () => (/* binding */ useGetUsersTheLoggedInUserMayKnowLazyQuery),\n/* harmony export */   \"useGetUsersTheLoggedInUserMayKnowQuery\": () => (/* binding */ useGetUsersTheLoggedInUserMayKnowQuery),\n/* harmony export */   \"useHelloLazyQuery\": () => (/* binding */ useHelloLazyQuery),\n/* harmony export */   \"useHelloQuery\": () => (/* binding */ useHelloQuery),\n/* harmony export */   \"useLikePostMutation\": () => (/* binding */ useLikePostMutation),\n/* harmony export */   \"useLogUserOutMutation\": () => (/* binding */ useLogUserOutMutation),\n/* harmony export */   \"useLoginMutation\": () => (/* binding */ useLoginMutation),\n/* harmony export */   \"useNewMessageSubscription\": () => (/* binding */ useNewMessageSubscription),\n/* harmony export */   \"useRegisterMutation\": () => (/* binding */ useRegisterMutation),\n/* harmony export */   \"useRetweetPostMutation\": () => (/* binding */ useRetweetPostMutation),\n/* harmony export */   \"useSearchUsersLazyQuery\": () => (/* binding */ useSearchUsersLazyQuery),\n/* harmony export */   \"useSearchUsersQuery\": () => (/* binding */ useSearchUsersQuery),\n/* harmony export */   \"useSendMessageMutation\": () => (/* binding */ useSendMessageMutation),\n/* harmony export */   \"useUpdateUserProfileMutation\": () => (/* binding */ useUpdateUserProfileMutation),\n/* harmony export */   \"useUploadUserImageMutation\": () => (/* binding */ useUploadUserImageMutation)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst defaultOptions = {};\nconst PostSnippetFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment PostSnippet on Post {\n  id\n  userId\n  firstName\n  lastName\n  content\n  voteStatus\n  likes {\n    userId\n  }\n  retweets {\n    userId\n  }\n  datePublished\n  userName\n  points\n  retweetsCount\n}\n    `;\nconst SpecifcUserSnippetFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment SpecifcUserSnippet on Users {\n  id\n  followersCount\n  followingCount\n  username\n  following {\n    id\n    username\n    followerId\n    followingId\n  }\n  follower {\n    id\n    username\n    followerId\n    followingId\n  }\n  profile {\n    avatar\n    website\n    location\n    bio\n  }\n}\n    `;\nconst ByeDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query Bye {\n  bye\n}\n    `;\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */ function useByeQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(ByeDocument, options);\n}\nfunction useByeLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(ByeDocument, options);\n}\nconst CommentOnPostDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation CommentOnPost($postId: Int!, $comment: String!, $datePublished: DateTime!) {\n  commentOnPost(postId: $postId, comment: $comment, datePublished: $datePublished)\n}\n    `;\n/**\n * __useCommentOnPostMutation__\n *\n * To run a mutation, you first call `useCommentOnPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommentOnPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [commentOnPostMutation, { data, loading, error }] = useCommentOnPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      comment: // value for 'comment'\n *      datePublished: // value for 'datePublished'\n *   },\n * });\n */ function useCommentOnPostMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CommentOnPostDocument, options);\n}\nconst CreatePostDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation CreatePost($content: String!, $firstName: String!, $lastName: String!, $userName: String!, $datePublished: DateTime!) {\n  createPost(\n    content: $content\n    firstName: $firstName\n    lastName: $lastName\n    userName: $userName\n    datePublished: $datePublished\n  )\n}\n    `;\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      content: // value for 'content'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      userName: // value for 'userName'\n *      datePublished: // value for 'datePublished'\n *   },\n * });\n */ function useCreatePostMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreatePostDocument, options);\n}\nconst DeletePostDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation DeletePost($postID: Int!) {\n  deletePost(postID: $postID)\n}\n    `;\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postID: // value for 'postID'\n *   },\n * });\n */ function useDeletePostMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(DeletePostDocument, options);\n}\nconst DeleteUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation DeleteUser($userId: Int!) {\n  deleteUser(userId: $userId)\n}\n    `;\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */ function useDeleteUserMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(DeleteUserDocument, options);\n}\nconst FollowUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation FollowUser($username: String!, $followingId: Int!, $value: Int!) {\n  followUser(username: $username, followingId: $followingId, value: $value)\n}\n    `;\n/**\n * __useFollowUserMutation__\n *\n * To run a mutation, you first call `useFollowUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useFollowUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [followUserMutation, { data, loading, error }] = useFollowUserMutation({\n *   variables: {\n *      username: // value for 'username'\n *      followingId: // value for 'followingId'\n *      value: // value for 'value'\n *   },\n * });\n */ function useFollowUserMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(FollowUserDocument, options);\n}\nconst GetAllMessagesFromUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetAllMessagesFromUser($fromId: Int!) {\n  getAllMessagesFromUser(fromId: $fromId) {\n    id\n    content\n    fromId\n    from {\n      id\n      firstName\n      lastName\n      username\n      profile {\n        avatar\n      }\n    }\n    toId\n    to {\n      id\n      firstName\n      lastName\n      username\n      profile {\n        avatar\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetAllMessagesFromUserQuery__\n *\n * To run a query within a React component, call `useGetAllMessagesFromUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllMessagesFromUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllMessagesFromUserQuery({\n *   variables: {\n *      fromId: // value for 'fromId'\n *   },\n * });\n */ function useGetAllMessagesFromUserQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllMessagesFromUserDocument, options);\n}\nfunction useGetAllMessagesFromUserLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllMessagesFromUserDocument, options);\n}\nconst GetAllPostsDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetAllPosts {\n  getAllPosts {\n    id\n    userId\n    firstName\n    lastName\n    content\n    voteStatus\n    likes {\n      userId\n    }\n    retweets {\n      userId\n    }\n    comments {\n      comment\n      user {\n        id\n        firstName\n        lastName\n        username\n        profile {\n          avatar\n        }\n      }\n    }\n    user {\n      id\n      firstName\n      lastName\n      username\n      email\n      profile {\n        id\n        avatar\n      }\n    }\n    datePublished\n    userName\n    points\n    retweetsCount\n    commentsCount\n  }\n}\n    `;\n/**\n * __useGetAllPostsQuery__\n *\n * To run a query within a React component, call `useGetAllPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPostsQuery({\n *   variables: {\n *   },\n * });\n */ function useGetAllPostsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllPostsDocument, options);\n}\nfunction useGetAllPostsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllPostsDocument, options);\n}\nconst GetAllSpecificUserPostsDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetAllSpecificUserPosts($userId: Int!) {\n  getAllSpecificUserPosts(userId: $userId) {\n    id\n    userId\n    firstName\n    lastName\n    content\n    voteStatus\n    likes {\n      userId\n    }\n    retweets {\n      userId\n    }\n    comments {\n      comment\n      user {\n        id\n        firstName\n        lastName\n        username\n        profile {\n          avatar\n        }\n      }\n    }\n    user {\n      id\n      firstName\n      lastName\n      username\n      email\n      profile {\n        id\n        avatar\n      }\n    }\n    datePublished\n    userName\n    points\n    commentsCount\n  }\n}\n    `;\n/**\n * __useGetAllSpecificUserPostsQuery__\n *\n * To run a query within a React component, call `useGetAllSpecificUserPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllSpecificUserPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllSpecificUserPostsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */ function useGetAllSpecificUserPostsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllSpecificUserPostsDocument, options);\n}\nfunction useGetAllSpecificUserPostsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllSpecificUserPostsDocument, options);\n}\nconst GetAllUserMessagesDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetAllUserMessages {\n  getAllUserMessages {\n    id\n    content\n    fromId\n    from {\n      id\n      firstName\n      lastName\n      username\n      profile {\n        avatar\n      }\n    }\n    toId\n    to {\n      id\n      firstName\n      lastName\n      username\n      profile {\n        avatar\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetAllUserMessagesQuery__\n *\n * To run a query within a React component, call `useGetAllUserMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUserMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUserMessagesQuery({\n *   variables: {\n *   },\n * });\n */ function useGetAllUserMessagesQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllUserMessagesDocument, options);\n}\nfunction useGetAllUserMessagesLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllUserMessagesDocument, options);\n}\nconst GetAllUsersDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query getAllUsers {\n  getAllUsers {\n    id\n    firstName\n    lastName\n    username\n    email\n    followersCount\n    followingCount\n    profile {\n      id\n      bio\n      avatar\n      website\n      location\n    }\n  }\n}\n    `;\n/**\n * __useGetAllUsersQuery__\n *\n * To run a query within a React component, call `useGetAllUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUsersQuery({\n *   variables: {\n *   },\n * });\n */ function useGetAllUsersQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllUsersDocument, options);\n}\nfunction useGetAllUsersLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllUsersDocument, options);\n}\nconst GetCurrentUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetCurrentUser {\n  getCurrentUser {\n    id\n    firstName\n    lastName\n    email\n    username\n    dateRegistered\n    followersCount\n    followingCount\n    following {\n      id\n      username\n      followerId\n      followingId\n    }\n    follower {\n      id\n      username\n      followerId\n      followingId\n    }\n    profile {\n      id\n      bio\n      avatar\n      website\n      location\n    }\n  }\n}\n    `;\n/**\n * __useGetCurrentUserQuery__\n *\n * To run a query within a React component, call `useGetCurrentUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCurrentUserQuery({\n *   variables: {\n *   },\n * });\n */ function useGetCurrentUserQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetCurrentUserDocument, options);\n}\nfunction useGetCurrentUserLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetCurrentUserDocument, options);\n}\nconst GetPostByIdDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetPostById($postId: Int!) {\n  getPostById(postId: $postId) {\n    id\n    userId\n    firstName\n    lastName\n    content\n    voteStatus\n    retweetsCount\n    likes {\n      userId\n    }\n    retweets {\n      userId\n    }\n    comments {\n      comment\n      datePublished\n      user {\n        id\n        firstName\n        lastName\n        username\n        profile {\n          avatar\n        }\n      }\n    }\n    user {\n      id\n      firstName\n      lastName\n      username\n      email\n      profile {\n        id\n        avatar\n      }\n    }\n    datePublished\n    userName\n    points\n    commentsCount\n  }\n}\n    `;\n/**\n * __useGetPostByIdQuery__\n *\n * To run a query within a React component, call `useGetPostByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostByIdQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */ function useGetPostByIdQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetPostByIdDocument, options);\n}\nfunction useGetPostByIdLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetPostByIdDocument, options);\n}\nconst GetSpecificUserInfoDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetSpecificUserInfo($userId: Int!) {\n  getSpecificUserInfo(userId: $userId) {\n    id\n    firstName\n    lastName\n    username\n    dateRegistered\n    followingCount\n    followersCount\n    following {\n      id\n      username\n      followerId\n      followingId\n    }\n    follower {\n      id\n      username\n      followerId\n      followingId\n    }\n    profile {\n      avatar\n      bio\n      location\n      website\n    }\n  }\n}\n    `;\n/**\n * __useGetSpecificUserInfoQuery__\n *\n * To run a query within a React component, call `useGetSpecificUserInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpecificUserInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpecificUserInfoQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */ function useGetSpecificUserInfoQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetSpecificUserInfoDocument, options);\n}\nfunction useGetSpecificUserInfoLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetSpecificUserInfoDocument, options);\n}\nconst GetAllUserPostsDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetAllUserPosts {\n  getAllUserPosts {\n    id\n    userId\n    firstName\n    lastName\n    content\n    voteStatus\n    likes {\n      userId\n    }\n    retweets {\n      userId\n    }\n    comments {\n      comment\n      user {\n        id\n        firstName\n        lastName\n        username\n        profile {\n          avatar\n        }\n      }\n    }\n    user {\n      id\n      firstName\n      lastName\n      username\n      email\n      profile {\n        id\n        avatar\n      }\n    }\n    datePublished\n    userName\n    points\n    commentsCount\n  }\n}\n    `;\n/**\n * __useGetAllUserPostsQuery__\n *\n * To run a query within a React component, call `useGetAllUserPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUserPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUserPostsQuery({\n *   variables: {\n *   },\n * });\n */ function useGetAllUserPostsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetAllUserPostsDocument, options);\n}\nfunction useGetAllUserPostsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetAllUserPostsDocument, options);\n}\nconst GetUsersTheLoggedInUserMayKnowDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query getUsersTheLoggedInUserMayKnow($userId: Int) {\n  getUsersTheLoggedInUserMayKnow(userId: $userId) {\n    id\n    firstName\n    lastName\n    username\n    profile {\n      avatar\n    }\n  }\n}\n    `;\n/**\n * __useGetUsersTheLoggedInUserMayKnowQuery__\n *\n * To run a query within a React component, call `useGetUsersTheLoggedInUserMayKnowQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersTheLoggedInUserMayKnowQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersTheLoggedInUserMayKnowQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */ function useGetUsersTheLoggedInUserMayKnowQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetUsersTheLoggedInUserMayKnowDocument, options);\n}\nfunction useGetUsersTheLoggedInUserMayKnowLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetUsersTheLoggedInUserMayKnowDocument, options);\n}\nconst HelloDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query Hello {\n  hello\n}\n    `;\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */ function useHelloQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(HelloDocument, options);\n}\nfunction useHelloLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(HelloDocument, options);\n}\nconst LikePostDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation LikePost($value: Int!, $postId: Int!) {\n  likePost(value: $value, postId: $postId)\n}\n    `;\n/**\n * __useLikePostMutation__\n *\n * To run a mutation, you first call `useLikePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLikePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [likePostMutation, { data, loading, error }] = useLikePostMutation({\n *   variables: {\n *      value: // value for 'value'\n *      postId: // value for 'postId'\n *   },\n * });\n */ function useLikePostMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(LikePostDocument, options);\n}\nconst LogUserOutDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation LogUserOut {\n  logUserOut\n}\n    `;\n/**\n * __useLogUserOutMutation__\n *\n * To run a mutation, you first call `useLogUserOutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogUserOutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logUserOutMutation, { data, loading, error }] = useLogUserOutMutation({\n *   variables: {\n *   },\n * });\n */ function useLogUserOutMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(LogUserOutDocument, options);\n}\nconst LoginDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation Login($email: String!, $password: String!) {\n  loginUser(email: $email, password: $password) {\n    errors {\n      field\n      message\n    }\n    data {\n      accessToken\n      user {\n        id\n        firstName\n        lastName\n        email\n        username\n      }\n    }\n  }\n}\n    `;\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */ function useLoginMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(LoginDocument, options);\n}\nconst NewMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    subscription NewMessage {\n  newMessage {\n    id\n    fromId\n    toId\n    content\n    dateSent\n  }\n}\n    `;\n/**\n * __useNewMessageSubscription__\n *\n * To run a query within a React component, call `useNewMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewMessageSubscription({\n *   variables: {\n *   },\n * });\n */ function useNewMessageSubscription(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useSubscription(NewMessageDocument, options);\n}\nconst RegisterDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation Register($email: String!, $firstName: String!, $lastName: String!, $username: String!, $password: String!, $dateRegistered: String!) {\n  registerUser(\n    email: $email\n    firstName: $firstName\n    lastName: $lastName\n    username: $username\n    password: $password\n    dateRegistered: $dateRegistered\n  ) {\n    errors {\n      field\n      message\n    }\n    data {\n      accessToken\n      user {\n        id\n        firstName\n        lastName\n        email\n        username\n      }\n    }\n  }\n}\n    `;\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      username: // value for 'username'\n *      password: // value for 'password'\n *      dateRegistered: // value for 'dateRegistered'\n *   },\n * });\n */ function useRegisterMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RegisterDocument, options);\n}\nconst RetweetPostDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation RetweetPost($value: Int!, $postId: Int!) {\n  retweetPost(value: $value, postId: $postId)\n}\n    `;\n/**\n * __useRetweetPostMutation__\n *\n * To run a mutation, you first call `useRetweetPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRetweetPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [retweetPostMutation, { data, loading, error }] = useRetweetPostMutation({\n *   variables: {\n *      value: // value for 'value'\n *      postId: // value for 'postId'\n *   },\n * });\n */ function useRetweetPostMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RetweetPostDocument, options);\n}\nconst SearchUsersDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query SearchUsers($username: String!) {\n  searchUsers(username: $username) {\n    id\n    firstName\n    lastName\n    username\n    followingCount\n    followersCount\n    following {\n      id\n      username\n      followerId\n      followingId\n    }\n    follower {\n      id\n      username\n      followerId\n      followingId\n    }\n    profile {\n      avatar\n      bio\n      location\n      website\n    }\n  }\n}\n    `;\n/**\n * __useSearchUsersQuery__\n *\n * To run a query within a React component, call `useSearchUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchUsersQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */ function useSearchUsersQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(SearchUsersDocument, options);\n}\nfunction useSearchUsersLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(SearchUsersDocument, options);\n}\nconst SendMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation SendMessage($toId: Int!, $dateSent: DateTime!, $content: String!) {\n  sendMessage(toId: $toId, dateSent: $dateSent, content: $content) {\n    id\n    fromId\n    toId\n    dateSent\n    content\n  }\n}\n    `;\n/**\n * __useSendMessageMutation__\n *\n * To run a mutation, you first call `useSendMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendMessageMutation, { data, loading, error }] = useSendMessageMutation({\n *   variables: {\n *      toId: // value for 'toId'\n *      dateSent: // value for 'dateSent'\n *      content: // value for 'content'\n *   },\n * });\n */ function useSendMessageMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(SendMessageDocument, options);\n}\nconst UpdateUserProfileDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation UpdateUserProfile($userId: Int!, $bio: String!, $website: String!, $location: String!) {\n  updateProfile(\n    userId: $userId\n    bio: $bio\n    website: $website\n    location: $location\n  )\n}\n    `;\n/**\n * __useUpdateUserProfileMutation__\n *\n * To run a mutation, you first call `useUpdateUserProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserProfileMutation, { data, loading, error }] = useUpdateUserProfileMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      bio: // value for 'bio'\n *      website: // value for 'website'\n *      location: // value for 'location'\n *   },\n * });\n */ function useUpdateUserProfileMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdateUserProfileDocument, options);\n}\nconst UploadUserImageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation UploadUserImage($userId: Int!, $file: Upload!) {\n  uploadUserImage(userId: $userId, file: $file) {\n    url\n  }\n}\n    `;\n/**\n * __useUploadUserImageMutation__\n *\n * To run a mutation, you first call `useUploadUserImageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadUserImageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadUserImageMutation, { data, loading, error }] = useUploadUserImageMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      file: // value for 'file'\n *   },\n * });\n */ function useUploadUserImageMutation(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UploadUserImageDocument, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./graphql/generated/graphql.tsx\n");

/***/ }),

/***/ "./pages/login.tsx":
/*!*************************!*\
  !*** ./pages/login.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material-ui/core */ \"@material-ui/core\");\n/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _auth_accessKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../auth/accessKey */ \"./auth/accessKey.ts\");\n/* harmony import */ var _graphql_generated_graphql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../graphql/generated/graphql */ \"./graphql/generated/graphql.tsx\");\n\n\n\n\n\n\n\n\nconst useStyles = (0,_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.makeStyles)((theme)=>(0,_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.createStyles)({\n        root: {\n            flexGrow: 1\n        },\n        paper: {\n            height: 140,\n            width: 300\n        },\n        grid: {\n            marginTop: 25\n        },\n        columnThree: {\n            marginTop: 25\n        }\n    }));\nconst Login = ()=>{\n    const { 0: email , 1: setEmail  } = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(\"\");\n    const { 0: password , 1: setPassword  } = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(\"\");\n    const { 0: loginError , 1: setLoginError  } = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(\"\");\n    const [loginUser] = (0,_graphql_generated_graphql__WEBPACK_IMPORTED_MODULE_6__.useLoginMutation)();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const handleLoginUser = async ()=>{\n        const res = await loginUser({\n            variables: {\n                email,\n                password\n            },\n            // refetchQueries: [{ query: GetCurrentUserDocument }]\n            update: (store, { data  })=>{\n                if (!data.loginUser.data) {\n                    // setLoginError(res.data.loginUser.errors[0].message);\n                    return null;\n                }\n                store.readQuery({\n                    query: _graphql_generated_graphql__WEBPACK_IMPORTED_MODULE_6__.GetCurrentUserDocument\n                });\n                store.writeQuery({\n                    query: _graphql_generated_graphql__WEBPACK_IMPORTED_MODULE_6__.GetCurrentUserDocument,\n                    data: {\n                        getCurrentUser: data?.loginUser?.data.user\n                    }\n                });\n            }\n        });\n        if (res && res.data?.loginUser.data) {\n            (0,_auth_accessKey__WEBPACK_IMPORTED_MODULE_5__.setAccessKey)(res.data.loginUser.data?.accessToken);\n            router.push(\"/\");\n        }\n        if (res && res.data?.loginUser.errors) {\n            setLoginError(res.data.loginUser.errors[0].message);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Login | Socialise\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 90,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"description\",\n                        content: \"Socialise\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 91,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"/favicon.ico\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 92,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                lineNumber: 89,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    width: \"100%\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        flexDirection: \"row\",\n                        p: 1,\n                        m: 1,\n                        mt: 6,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                            p: 1,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.TextField, {\n                                onChange: (event)=>{\n                                    setEmail(event.target.value);\n                                },\n                                style: {\n                                    width: 400\n                                },\n                                id: \"outlined-basic\",\n                                fullWidth: true,\n                                label: \"Email\",\n                                variant: \"outlined\",\n                                type: \"email\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                                lineNumber: 104,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                            lineNumber: 103,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 95,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        flexDirection: \"row\",\n                        p: 1,\n                        m: 1,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                            p: 1,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.TextField, {\n                                onChange: (event)=>{\n                                    setPassword(event.target.value);\n                                },\n                                style: {\n                                    width: 400\n                                },\n                                id: \"outlined-basic\",\n                                label: \"Password\",\n                                variant: \"outlined\",\n                                type: \"password\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                                lineNumber: 125,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                            lineNumber: 124,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 117,\n                        columnNumber: 9\n                    }, undefined),\n                    loginError ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        flexDirection: \"row\",\n                        p: 1,\n                        m: 1,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-red-500\",\n                            children: loginError\n                        }, void 0, false, {\n                            fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                            lineNumber: 145,\n                            columnNumber: 13\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 138,\n                        columnNumber: 11\n                    }, undefined) : null,\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        flexDirection: \"row\",\n                        p: 1,\n                        m: 1,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Box, {\n                            p: 1,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.Button, {\n                                onClick: handleLoginUser,\n                                variant: \"contained\",\n                                color: \"primary\",\n                                children: \"Login\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                                lineNumber: 157,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                            lineNumber: 156,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                        lineNumber: 149,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/Perry/dev/builds/socialise/client/pages/login.tsx\",\n                lineNumber: 94,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Login);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLGdCQUFnQjtnQ0FDbkJFLEtBQUssRUFBQyxVQUFVO2dDQUNoQkMsT0FBTyxFQUFDLFVBQVU7Z0NBQ2xCQyxJQUFJLEVBQUMsVUFBVTs7Ozs7eUNBQ2Y7Ozs7O3FDQUNFOzs7OztpQ0FDRjtvQkFDTDFDLFVBQVUsaUJBQ1QsOERBQUMzQixrREFBRzt3QkFDRnVELE9BQU8sRUFBQyxNQUFNO3dCQUNkQyxjQUFjLEVBQUMsUUFBUTt3QkFDdkJDLGFBQWEsRUFBQyxLQUFLO3dCQUNuQkMsQ0FBQyxFQUFFLENBQUM7d0JBQ0pDLENBQUMsRUFBRSxDQUFDO2tDQUVKLDRFQUFDRCxHQUFDOzRCQUFDWSxTQUFTLEVBQUMsY0FBYztzQ0FBRTNDLFVBQVU7Ozs7O3FDQUFLOzs7OztpQ0FDeEMsR0FDSixJQUFJO2tDQUVSLDhEQUFDM0Isa0RBQUc7d0JBQ0Z1RCxPQUFPLEVBQUMsTUFBTTt3QkFDZEMsY0FBYyxFQUFDLFFBQVE7d0JBQ3ZCQyxhQUFhLEVBQUMsS0FBSzt3QkFDbkJDLENBQUMsRUFBRSxDQUFDO3dCQUNKQyxDQUFDLEVBQUUsQ0FBQztrQ0FFSiw0RUFBQzNELGtEQUFHOzRCQUFDMEQsQ0FBQyxFQUFFLENBQUM7c0NBQ1AsNEVBQUN6RCxxREFBTTtnQ0FDTHNFLE9BQU8sRUFBRXhDLGVBQWU7Z0NBQ3hCcUMsT0FBTyxFQUFDLFdBQVc7Z0NBQ25CSSxLQUFLLEVBQUMsU0FBUzswQ0FDaEIsT0FFRDs7Ozs7eUNBQVM7Ozs7O3FDQUNMOzs7OztpQ0FDRjs7Ozs7O3lCQUNGOztvQkFDTCxDQUNIO0NBQ0g7QUFFRCxpRUFBZWxELEtBQUssRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL3BhZ2VzL2xvZ2luLnRzeD83MjQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJveCxcbiAgQnV0dG9uLFxuICBjcmVhdGVTdHlsZXMsXG4gIG1ha2VTdHlsZXMsXG4gIFRleHRGaWVsZCxcbiAgVGhlbWUsXG59IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xuaW1wb3J0IHsgRG9jdW1lbnROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB0eXBlIHsgTmV4dFBhZ2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IEhlYWQgZnJvbSBcIm5leHQvaGVhZFwiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2V0QWNjZXNzS2V5IH0gZnJvbSBcIi4uL2F1dGgvYWNjZXNzS2V5XCI7XG5pbXBvcnQge1xuICBHZXRDdXJyZW50VXNlckRvY3VtZW50LFxuICB1c2VMb2dpbk11dGF0aW9uLFxufSBmcm9tIFwiLi4vZ3JhcGhxbC9nZW5lcmF0ZWQvZ3JhcGhxbFwiO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+XG4gIGNyZWF0ZVN0eWxlcyh7XG4gICAgcm9vdDoge1xuICAgICAgZmxleEdyb3c6IDEsXG4gICAgfSxcbiAgICBwYXBlcjoge1xuICAgICAgaGVpZ2h0OiAxNDAsXG4gICAgICB3aWR0aDogMzAwLFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgbWFyZ2luVG9wOiAyNSxcbiAgICB9LFxuICAgIGNvbHVtblRocmVlOiB7XG4gICAgICBtYXJnaW5Ub3A6IDI1LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5jb25zdCBMb2dpbjogTmV4dFBhZ2UgPSAoKSA9PiB7XG4gIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtsb2dpbkVycm9yLCBzZXRMb2dpbkVycm9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbbG9naW5Vc2VyXSA9IHVzZUxvZ2luTXV0YXRpb24oKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgY29uc3QgaGFuZGxlTG9naW5Vc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGxvZ2luVXNlcih7XG4gICAgICB2YXJpYWJsZXM6IHsgZW1haWwsIHBhc3N3b3JkIH0sXG4gICAgICAvLyByZWZldGNoUXVlcmllczogW3sgcXVlcnk6IEdldEN1cnJlbnRVc2VyRG9jdW1lbnQgfV1cbiAgICAgIHVwZGF0ZTogKFxuICAgICAgICBzdG9yZToge1xuICAgICAgICAgIHJlYWRRdWVyeTogKGFyZzA6IHsgcXVlcnk6IERvY3VtZW50Tm9kZSB9KSA9PiBhbnk7XG4gICAgICAgICAgd3JpdGVRdWVyeTogKGFyZzA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBEb2N1bWVudE5vZGU7XG4gICAgICAgICAgICBkYXRhOiB7IGdldEN1cnJlbnRVc2VyOiBhbnkgfTtcbiAgICAgICAgICB9KSA9PiB2b2lkO1xuICAgICAgICB9LFxuICAgICAgICB7IGRhdGEgfTogYW55XG4gICAgICApID0+IHtcbiAgICAgICAgaWYgKCFkYXRhLmxvZ2luVXNlci5kYXRhKSB7XG4gICAgICAgICAgLy8gc2V0TG9naW5FcnJvcihyZXMuZGF0YS5sb2dpblVzZXIuZXJyb3JzWzBdLm1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0b3JlLnJlYWRRdWVyeSh7XG4gICAgICAgICAgcXVlcnk6IEdldEN1cnJlbnRVc2VyRG9jdW1lbnQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0b3JlLndyaXRlUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBHZXRDdXJyZW50VXNlckRvY3VtZW50LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdldEN1cnJlbnRVc2VyOiBkYXRhPy5sb2dpblVzZXI/LmRhdGEudXNlciBhcyBhbnksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKHJlcyAmJiByZXMuZGF0YT8ubG9naW5Vc2VyLmRhdGEpIHtcbiAgICAgIHNldEFjY2Vzc0tleShyZXMuZGF0YS5sb2dpblVzZXIuZGF0YT8uYWNjZXNzVG9rZW4pO1xuICAgICAgcm91dGVyLnB1c2goXCIvXCIpO1xuICAgIH1cblxuICAgIGlmIChyZXMgJiYgcmVzLmRhdGE/LmxvZ2luVXNlci5lcnJvcnMpIHtcbiAgICAgIHNldExvZ2luRXJyb3IocmVzLmRhdGEubG9naW5Vc2VyLmVycm9yc1swXS5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDx0aXRsZT5Mb2dpbiB8IFNvY2lhbGlzZTwvdGl0bGU+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJTb2NpYWxpc2VcIiAvPlxuICAgICAgICA8bGluayByZWw9XCJpY29uXCIgaHJlZj1cIi9mYXZpY29uLmljb1wiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiB9fT5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgICAgZmxleERpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAgcD17MX1cbiAgICAgICAgICBtPXsxfVxuICAgICAgICAgIG10PXs2fVxuICAgICAgICA+XG4gICAgICAgICAgPEJveCBwPXsxfT5cbiAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEVtYWlsKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiA0MDAgfX1cbiAgICAgICAgICAgICAgaWQ9XCJvdXRsaW5lZC1iYXNpY1wiXG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBsYWJlbD1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Qm94XG4gICAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgICBwPXsxfVxuICAgICAgICAgIG09ezF9XG4gICAgICAgID5cbiAgICAgICAgICA8Qm94IHA9ezF9PlxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0UGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDQwMCB9fVxuICAgICAgICAgICAgICBpZD1cIm91dGxpbmVkLWJhc2ljXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgICAge2xvZ2luRXJyb3IgPyAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAgICBwPXsxfVxuICAgICAgICAgICAgbT17MX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXJlZC01MDBcIj57bG9naW5FcnJvcn08L3A+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgIDxCb3hcbiAgICAgICAgICBkaXNwbGF5PVwiZmxleFwiXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJyb3dcIlxuICAgICAgICAgIHA9ezF9XG4gICAgICAgICAgbT17MX1cbiAgICAgICAgPlxuICAgICAgICAgIDxCb3ggcD17MX0+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxvZ2luVXNlcn1cbiAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIExvZ2luXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luO1xuIl0sIm5hbWVzIjpbIkJveCIsIkJ1dHRvbiIsImNyZWF0ZVN0eWxlcyIsIm1ha2VTdHlsZXMiLCJUZXh0RmllbGQiLCJIZWFkIiwidXNlUm91dGVyIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsInNldEFjY2Vzc0tleSIsIkdldEN1cnJlbnRVc2VyRG9jdW1lbnQiLCJ1c2VMb2dpbk11dGF0aW9uIiwidXNlU3R5bGVzIiwidGhlbWUiLCJyb290IiwiZmxleEdyb3ciLCJwYXBlciIsImhlaWdodCIsIndpZHRoIiwiZ3JpZCIsIm1hcmdpblRvcCIsImNvbHVtblRocmVlIiwiTG9naW4iLCJlbWFpbCIsInNldEVtYWlsIiwicGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsImxvZ2luRXJyb3IiLCJzZXRMb2dpbkVycm9yIiwibG9naW5Vc2VyIiwicm91dGVyIiwiaGFuZGxlTG9naW5Vc2VyIiwicmVzIiwidmFyaWFibGVzIiwidXBkYXRlIiwic3RvcmUiLCJkYXRhIiwicmVhZFF1ZXJ5IiwicXVlcnkiLCJ3cml0ZVF1ZXJ5IiwiZ2V0Q3VycmVudFVzZXIiLCJ1c2VyIiwiYWNjZXNzVG9rZW4iLCJwdXNoIiwiZXJyb3JzIiwibWVzc2FnZSIsInRpdGxlIiwibWV0YSIsIm5hbWUiLCJjb250ZW50IiwibGluayIsInJlbCIsImhyZWYiLCJkaXYiLCJzdHlsZSIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImZsZXhEaXJlY3Rpb24iLCJwIiwibSIsIm10Iiwib25DaGFuZ2UiLCJldmVudCIsInRhcmdldCIsInZhbHVlIiwiaWQiLCJmdWxsV2lkdGgiLCJsYWJlbCIsInZhcmlhbnQiLCJ0eXBlIiwiY2xhc3NOYW1lIiwib25DbGljayIsImNvbG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/login.tsx\n");

/***/ }),

/***/ "@apollo/client":
/*!*********************************!*\
  !*** external "@apollo/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@apollo/client");

/***/ }),

/***/ "@material-ui/core":
/*!************************************!*\
  !*** external "@material-ui/core" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("@material-ui/core");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/login.tsx"));
module.exports = __webpack_exports__;

})();